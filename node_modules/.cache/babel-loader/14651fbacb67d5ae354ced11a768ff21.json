{"ast":null,"code":"var _jsxFileName = \"/Users/jasonjin/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const transactions = useMemo(() => {\n    if (transactionsByEmployee !== null) {\n      return transactionsByEmployee;\n    }\n\n    return allTransactions;\n  }, [transactionsByEmployee, allTransactions]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await paginatedTransactionsUtils.fetchAll();\n\n    if (paginatedTransactions !== null && paginatedTransactions !== void 0 && paginatedTransactions.data) {\n      setAllTransactions(prevTransactions => [...prevTransactions, ...paginatedTransactions.data]);\n    }\n\n    setIsLoading(false);\n    setCurrentPage(prevPage => prevPage + 1); // Increment page for next fetch\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    setAllTransactions([]); // Clear transactions when filtering by employee\n\n    setCurrentPage(0); // Reset pagination\n\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n            setAllTransactions([]); // Clear transactions when loading all\n\n            setCurrentPage(0); // Reset pagination\n\n            await loadAllTransactions();\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"CyX41qJ7u3/Phegzjci+NJcQQ9k=\", false, function () {\n  return [usePaginatedTransactions, useEmployees, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","paginatedTransactions","paginatedTransactionsUtils","employees","employeeUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","allTransactions","setAllTransactions","currentPage","setCurrentPage","transactions","loadAllTransactions","invalidateData","fetchAll","prevTransactions","prevPage","loadTransactionsByEmployee","employeeId","fetchById","loading","item","value","id","label","firstName","lastName","newValue"],"sources":["/Users/jasonjin/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee, Transaction } from \"./utils/types\";\n\nexport function App() {\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([]);\n  const [currentPage, setCurrentPage] = useState(0);\n\n  const transactions = useMemo(() => {\n    if (transactionsByEmployee !== null) {\n      return transactionsByEmployee;\n    }\n    return allTransactions;\n  }, [transactionsByEmployee, allTransactions]);\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n\n    await paginatedTransactionsUtils.fetchAll();\n\n    if (paginatedTransactions?.data) {\n      setAllTransactions((prevTransactions) => [\n        ...prevTransactions,\n        ...paginatedTransactions.data,\n      ]);\n    }\n\n    setIsLoading(false);\n    setCurrentPage((prevPage) => prevPage + 1); // Increment page for next fetch\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils, paginatedTransactions]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      setAllTransactions([]); // Clear transactions when filtering by employee\n      setCurrentPage(0); // Reset pagination\n      paginatedTransactionsUtils.invalidateData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n              setAllTransactions([]); // Clear transactions when loading all\n              setCurrentPage(0); // Reset pagination\n              await loadAllTransactions();\n              return;\n            }\n\n            await loadTransactionsByEmployee(newValue.id);\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions();\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}