{"ast":null,"code":"var _jsxFileName = \"/Users/jasonjin/Desktop/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState(null);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const updateAllTransactions = useCallback(newTransactions => {\n    setAllTransactions(prevTransactions => {\n      const newUniqueTransactions = newTransactions.filter(newTransaction => !prevTransactions.some(prevTransaction => prevTransaction.id === newTransaction.id));\n      return [...prevTransactions, ...newUniqueTransactions];\n    });\n  }, []);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    await transactionsByEmployeeUtils.fetchById(employeeId);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const handleLoadMore = useCallback(async () => {\n    setIsLoading(true);\n\n    if (selectedEmployee && selectedEmployee !== EMPTY_EMPLOYEE) {\n      await loadTransactionsByEmployee(selectedEmployee.id);\n    } else {\n      await paginatedTransactionsUtils.fetchAll(); // Continue fetching paginated transactions\n    }\n\n    setIsLoading(false);\n  }, [selectedEmployee, loadTransactionsByEmployee, paginatedTransactionsUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  useEffect(() => {\n    if (transactions) {\n      updateAllTransactions(transactions);\n    }\n  }, [transactions, updateAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          setSelectedEmployee(newValue);\n          setAllTransactions([]);\n\n          if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n            await loadAllTransactions();\n            return;\n          }\n\n          await loadTransactionsByEmployee(newValue.id);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: allTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading || isLoading,\n          onClick: handleLoadMore,\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"UGcxHC4pntsghdh0u+zwcRSSHec=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","allTransactions","setAllTransactions","selectedEmployee","setSelectedEmployee","transactions","updateAllTransactions","newTransactions","prevTransactions","newUniqueTransactions","filter","newTransaction","some","prevTransaction","id","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","handleLoadMore","loading","item","value","label","firstName","lastName","newValue"],"sources":["/Users/jasonjin/Desktop/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee, Transaction } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [allTransactions, setAllTransactions] = useState<Transaction[]>([]);\n  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  );\n\n  const updateAllTransactions = useCallback((newTransactions: Transaction[]) => {\n    setAllTransactions((prevTransactions) => {\n      const newUniqueTransactions = newTransactions.filter(\n        (newTransaction) => !prevTransactions.some((prevTransaction) => prevTransaction.id === newTransaction.id)\n      );\n      return [...prevTransactions, ...newUniqueTransactions];\n    });\n  }, []);\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  const handleLoadMore = useCallback(async () => {\n    setIsLoading(true);\n    if (selectedEmployee && selectedEmployee !== EMPTY_EMPLOYEE) {\n      await loadTransactionsByEmployee(selectedEmployee.id);\n    } else {\n      await paginatedTransactionsUtils.fetchAll(); // Continue fetching paginated transactions\n    }\n    setIsLoading(false);\n  }, [selectedEmployee, loadTransactionsByEmployee, paginatedTransactionsUtils]);\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  useEffect(() => {\n    if (transactions) {\n      updateAllTransactions(transactions);\n    }\n  }, [transactions, updateAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            setSelectedEmployee(newValue);\n            setAllTransactions([]);\n            if (newValue === null || newValue === EMPTY_EMPLOYEE) {\n              await loadAllTransactions();\n              return;\n            }\n            await loadTransactionsByEmployee(newValue.id);\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={allTransactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading || isLoading}\n              onClick={handleLoadMore}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}