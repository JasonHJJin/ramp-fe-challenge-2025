{"ast":null,"code":"var _jsxFileName = \"/Users/jasonjin/Desktop/ramp-fe-challenge/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions: initialTransactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    loading\n  } = useCustomFetch(); // Ensure the transactions state is initialized to an empty array if null\n\n  const [transactions, setTransactions] = useState(initialTransactions !== null && initialTransactions !== void 0 ? initialTransactions : []); // Function to handle the approval change\n\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n    await fetchWithoutCache(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    }); // Update the local transactions state to reflect the change, with null check\n\n    setTransactions(prevTransactions => (prevTransactions !== null && prevTransactions !== void 0 ? prevTransactions : []).map(transaction => transaction.id === transactionId ? { ...transaction,\n      approved: newValue\n    } : transaction));\n  }, [fetchWithoutCache]);\n\n  if (transactions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"x7nhAVCq4Z3z5bQ/X40mQ/I+H20=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useState","useCallback","useCustomFetch","TransactionPane","Transactions","transactions","initialTransactions","fetchWithoutCache","loading","setTransactions","setTransactionApproval","transactionId","newValue","value","prevTransactions","map","transaction","id","approved"],"sources":["/Users/jasonjin/Desktop/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { SetTransactionApprovalParams } from \"src/utils/types\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\";\n\nexport const Transactions: TransactionsComponent = ({ transactions: initialTransactions }) => {\n  const { fetchWithoutCache, loading } = useCustomFetch();\n\n  // Ensure the transactions state is initialized to an empty array if null\n  const [transactions, setTransactions] = useState(initialTransactions ?? []);\n\n  // Function to handle the approval change\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue,\n      });\n\n      // Update the local transactions state to reflect the change, with null check\n      setTransactions((prevTransactions) =>\n        (prevTransactions ?? []).map((transaction) =>\n          transaction.id === transactionId\n            ? { ...transaction, approved: newValue }\n            : transaction\n        )\n      );\n    },\n    [fetchWithoutCache]\n  );\n\n  if (transactions === null) {\n    return <div className=\"RampLoading--container\">Loading...</div>;\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {transactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAGA,OAAO,MAAMC,YAAmC,GAAG,QAA2C;EAAA;;EAAA,IAA1C;IAAEC,YAAY,EAAEC;EAAhB,CAA0C;EAC5F,MAAM;IAAEC,iBAAF;IAAqBC;EAArB,IAAiCN,cAAc,EAArD,CAD4F,CAG5F;;EACA,MAAM,CAACG,YAAD,EAAeI,eAAf,IAAkCT,QAAQ,CAACM,mBAAD,aAACA,mBAAD,cAACA,mBAAD,GAAwB,EAAxB,CAAhD,CAJ4F,CAM5F;;EACA,MAAMI,sBAAsB,GAAGT,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEU,aAAF;MAAiBC;IAAjB,CAAgC;IACrC,MAAML,iBAAiB,CAAqC,wBAArC,EAA+D;MACpFI,aADoF;MAEpFE,KAAK,EAAED;IAF6E,CAA/D,CAAvB,CADqC,CAMrC;;IACAH,eAAe,CAAEK,gBAAD,IACd,CAACA,gBAAD,aAACA,gBAAD,cAACA,gBAAD,GAAqB,EAArB,EAAyBC,GAAzB,CAA8BC,WAAD,IAC3BA,WAAW,CAACC,EAAZ,KAAmBN,aAAnB,GACI,EAAE,GAAGK,WAAL;MAAkBE,QAAQ,EAAEN;IAA5B,CADJ,GAEII,WAHN,CADa,CAAf;EAOD,CAfuC,EAgBxC,CAACT,iBAAD,CAhBwC,CAA1C;;EAmBA,IAAIF,YAAY,KAAK,IAArB,EAA2B;IACzB,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGA,YAAY,CAACU,GAAb,CAAkBC,WAAD,iBAChB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAER,OAHX;MAIE,sBAAsB,EAAEE;IAJ1B,GACOM,WAAW,CAACC,EADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA1CM;;GAAMb,Y;UAC4BF,c;;;KAD5BE,Y"},"metadata":{},"sourceType":"module"}