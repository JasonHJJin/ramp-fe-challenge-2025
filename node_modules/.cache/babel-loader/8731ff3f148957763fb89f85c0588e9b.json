{"ast":null,"code":"var _jsxFileName = \"/Users/jasonjin/Desktop/ramp-fe-challenge/src/components/InputSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n// Type guard to check if the item is the \"All Employees\" option\nfunction isAllEmployeesOption(item) {\n  return item.id === \"all\";\n}\n\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  // Prepend \"All Employees\" option to the list\n  const allEmployeesOption = {\n    id: \"all\",\n    firstName: \"All\",\n    lastName: \"Employees\"\n  };\n  const extendedItems = [allEmployeesOption, ...items];\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n\n    consumerOnChange(selectedItem);\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    children: _ref2 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref2;\n      const toggleProps = getToggleButtonProps();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        style: {\n          position: 'relative'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", { ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--input\",\n          onClick: toggleProps.onClick,\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            position: 'absolute',\n            width: '100%',\n            zIndex: 1000\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this);\n\n      function renderItems() {\n        if (!isOpen) {\n          return null;\n        }\n\n        if (isLoading) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: [loadingLabel, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 20\n          }, this);\n        }\n\n        if (extendedItems.length === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: \"No items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 20\n          }, this);\n        }\n\n        return extendedItems.map((item, index) => {\n          const parsedItem = isAllEmployeesOption(item) ? {\n            label: \"All Employees\",\n            value: \"all\"\n          } : parseItem(item);\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getItemProps({\n              key: parsedItem.value,\n              index,\n              item: item,\n              // Cast to TItem since the type guard handles the distinction\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                \"RampInputSelect--dropdown-item-selected\": selectedItem && parseItem(selectedItem).value === parsedItem.value\n              })\n            }),\n            children: parsedItem.label\n          }, parsedItem.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this);\n        });\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputSelect, \"lqW3k6Y9RRCMLTzZa91p08P/8Y8=\");\n\n_c = InputSelect;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","classNames","isAllEmployeesOption","item","id","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","allEmployeesOption","firstName","lastName","extendedItems","selectedValue","setSelectedValue","selectedItem","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","position","onClick","width","zIndex","renderItems","length","map","index","parsedItem","value","key","className"],"sources":["/Users/jasonjin/Desktop/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\";\nimport { useCallback, useState } from \"react\";\nimport classNames from \"classnames\";\nimport {\n  InputSelectOnChange,\n  InputSelectProps,\n  InputSelectItem,\n} from \"./types\";\n\n// Type guard to check if the item is the \"All Employees\" option\nfunction isAllEmployeesOption<TItem>(item: TItem | { id: string; firstName: string; lastName: string }): item is { id: string; firstName: string; lastName: string } {\n  return (item as { id: string; firstName: string; lastName: string }).id === \"all\";\n}\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  // Prepend \"All Employees\" option to the list\n  const allEmployeesOption = { id: \"all\", firstName: \"All\", lastName: \"Employees\" };\n  const extendedItems = [allEmployeesOption, ...items] as Array<TItem | typeof allEmployeesOption>;\n\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null);\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) {\n        return;\n      }\n      consumerOnChange(selectedItem);\n      setSelectedValue(selectedItem);\n    },\n    [consumerOnChange]\n  );\n\n  return (\n    <Downshift<TItem | typeof allEmployeesOption>\n      id=\"RampSelect\"\n      onChange={onChange}\n      selectedItem={selectedValue}\n      itemToString={(item) => (item ? parseItem(item as TItem).label : \"\")}\n    >\n      {({\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue,\n      }) => {\n        const toggleProps = getToggleButtonProps();\n\n        return (\n          <div className=\"RampInputSelect--root\" style={{ position: 'relative' }}>\n            <label {...getLabelProps()}>{label}</label>\n            <div className=\"RampBreak--xs\" />\n            <div\n              className=\"RampInputSelect--input\"\n              onClick={toggleProps.onClick}\n            >\n              {inputValue}\n            </div>\n            <div\n              className={classNames(\"RampInputSelect--dropdown-container\", {\n                \"RampInputSelect--dropdown-container-opened\": isOpen,\n              })}\n              {...getMenuProps()}\n              style={{ position: 'absolute', width: '100%', zIndex: 1000 }}\n            >\n              {renderItems()}\n            </div>\n          </div>\n        );\n\n        function renderItems() {\n          if (!isOpen) {\n            return null;\n          }\n\n          if (isLoading) {\n            return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>;\n          }\n\n          if (extendedItems.length === 0) {\n            return <div className=\"RampInputSelect--dropdown-item\">No items</div>;\n          }\n\n          return extendedItems.map((item, index) => {\n            const parsedItem = isAllEmployeesOption(item) ? { label: \"All Employees\", value: \"all\" } : parseItem(item as TItem);\n            return (\n              <div\n                key={parsedItem.value}\n                {...getItemProps({\n                  key: parsedItem.value,\n                  index,\n                  item: item as TItem, // Cast to TItem since the type guard handles the distinction\n                  className: classNames(\"RampInputSelect--dropdown-item\", {\n                    \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                    \"RampInputSelect--dropdown-item-selected\":\n                      selectedItem && parseItem(selectedItem as TItem).value === parsedItem.value,\n                  }),\n                })}\n              >\n                {parsedItem.label}\n              </div>\n            );\n          });\n        }\n      }}\n    </Downshift>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,OAAOC,UAAP,MAAuB,YAAvB;;;AAOA;AACA,SAASC,oBAAT,CAAqCC,IAArC,EAAqK;EACnK,OAAQA,IAAD,CAA8DC,EAA9D,KAAqE,KAA5E;AACD;;AAED,OAAO,SAASC,WAAT,OAQqB;EAAA;;EAAA,IARO;IACjCC,KADiC;IAEjCC,YAFiC;IAGjCC,QAAQ,EAAEC,gBAHuB;IAIjCC,KAJiC;IAKjCC,SALiC;IAMjCC,SANiC;IAOjCC;EAPiC,CAQP;EAC1B;EACA,MAAMC,kBAAkB,GAAG;IAAEV,EAAE,EAAE,KAAN;IAAaW,SAAS,EAAE,KAAxB;IAA+BC,QAAQ,EAAE;EAAzC,CAA3B;EACA,MAAMC,aAAa,GAAG,CAACH,kBAAD,EAAqB,GAAGJ,KAAxB,CAAtB;EAEA,MAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCnB,QAAQ,CAAeO,YAAf,aAAeA,YAAf,cAAeA,YAAf,GAA+B,IAA/B,CAAlD;EAEA,MAAMC,QAAQ,GAAGT,WAAW,CACzBqB,YAAD,IAAkB;IAChB,IAAIA,YAAY,KAAK,IAArB,EAA2B;MACzB;IACD;;IACDX,gBAAgB,CAACW,YAAD,CAAhB;IACAD,gBAAgB,CAACC,YAAD,CAAhB;EACD,CAPyB,EAQ1B,CAACX,gBAAD,CAR0B,CAA5B;EAWA,oBACE,QAAC,SAAD;IACE,EAAE,EAAC,YADL;IAEE,QAAQ,EAAED,QAFZ;IAGE,YAAY,EAAEU,aAHhB;IAIE,YAAY,EAAGf,IAAD,IAAWA,IAAI,GAAGQ,SAAS,CAACR,IAAD,CAAT,CAAyBG,KAA5B,GAAoC,EAJnE;IAAA,UAMG,SASK;MAAA,IATJ;QACAe,YADA;QAEAC,aAFA;QAGAC,YAHA;QAIAC,MAJA;QAKAC,gBALA;QAMAL,YANA;QAOAM,oBAPA;QAQAC;MARA,CASI;MACJ,MAAMC,WAAW,GAAGF,oBAAoB,EAAxC;MAEA,oBACE;QAAK,SAAS,EAAC,uBAAf;QAAuC,KAAK,EAAE;UAAEG,QAAQ,EAAE;QAAZ,CAA9C;QAAA,wBACE,sBAAWP,aAAa,EAAxB;UAAA,UAA6BhB;QAA7B;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAK,SAAS,EAAC;QAAf;UAAA;UAAA;UAAA;QAAA,QAFF,eAGE;UACE,SAAS,EAAC,wBADZ;UAEE,OAAO,EAAEsB,WAAW,CAACE,OAFvB;UAAA,UAIGH;QAJH;UAAA;UAAA;UAAA;QAAA,QAHF,eASE;UACE,SAAS,EAAE1B,UAAU,CAAC,qCAAD,EAAwC;YAC3D,8CAA8CuB;UADa,CAAxC,CADvB;UAAA,GAIMD,YAAY,EAJlB;UAKE,KAAK,EAAE;YAAEM,QAAQ,EAAE,UAAZ;YAAwBE,KAAK,EAAE,MAA/B;YAAuCC,MAAM,EAAE;UAA/C,CALT;UAAA,UAOGC,WAAW;QAPd;UAAA;UAAA;UAAA;QAAA,QATF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF;;MAsBA,SAASA,WAAT,GAAuB;QACrB,IAAI,CAACT,MAAL,EAAa;UACX,OAAO,IAAP;QACD;;QAED,IAAIZ,SAAJ,EAAe;UACb,oBAAO;YAAK,SAAS,EAAC,gCAAf;YAAA,WAAiDC,YAAjD;UAAA;YAAA;YAAA;YAAA;UAAA,QAAP;QACD;;QAED,IAAII,aAAa,CAACiB,MAAd,KAAyB,CAA7B,EAAgC;UAC9B,oBAAO;YAAK,SAAS,EAAC,gCAAf;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAP;QACD;;QAED,OAAOjB,aAAa,CAACkB,GAAd,CAAkB,CAAChC,IAAD,EAAOiC,KAAP,KAAiB;UACxC,MAAMC,UAAU,GAAGnC,oBAAoB,CAACC,IAAD,CAApB,GAA6B;YAAEG,KAAK,EAAE,eAAT;YAA0BgC,KAAK,EAAE;UAAjC,CAA7B,GAAwE3B,SAAS,CAACR,IAAD,CAApG;UACA,oBACE,oBAEMkB,YAAY,CAAC;cACfkB,GAAG,EAAEF,UAAU,CAACC,KADD;cAEfF,KAFe;cAGfjC,IAAI,EAAEA,IAHS;cAGM;cACrBqC,SAAS,EAAEvC,UAAU,CAAC,gCAAD,EAAmC;gBACtD,8CAA8CwB,gBAAgB,KAAKW,KADb;gBAEtD,2CACEhB,YAAY,IAAIT,SAAS,CAACS,YAAD,CAAT,CAAiCkB,KAAjC,KAA2CD,UAAU,CAACC;cAHlB,CAAnC;YAJN,CAAD,CAFlB;YAAA,UAaGD,UAAU,CAAC/B;UAbd,GACO+B,UAAU,CAACC,KADlB;YAAA;YAAA;YAAA;UAAA,QADF;QAiBD,CAnBM,CAAP;MAoBD;IACF;EA1EH;IAAA;IAAA;IAAA;EAAA,QADF;AA8ED;;GAxGejC,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}