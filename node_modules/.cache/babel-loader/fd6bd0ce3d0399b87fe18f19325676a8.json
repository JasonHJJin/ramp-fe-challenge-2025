{"ast":null,"code":"var _jsxFileName = \"/Users/jasonjin/Desktop/ramp-fe-challenge/src/components/Transactions/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transactions = _ref => {\n  _s();\n\n  let {\n    transactions\n  } = _ref;\n  const {\n    fetchWithoutCache,\n    updateCache,\n    invalidateCache,\n    loading\n  } = useCustomFetch();\n  const setTransactionApproval = useCallback(async _ref2 => {\n    let {\n      transactionId,\n      newValue\n    } = _ref2;\n\n    if (!transactions) {\n      console.error(\"Transactions data is null.\");\n      return;\n    }\n\n    await fetchWithoutCache(\"setTransactionApproval\", {\n      transactionId,\n      value: newValue\n    }); // Option 1: Update the cache manually\n\n    const updatedTransactions = transactions.map(transaction => transaction.id === transactionId ? { ...transaction,\n      approved: newValue\n    } : transaction);\n    updateCache(\"transactionsByEmployee\", undefined, updatedTransactions); // Option 2: Invalidate cache for re-fetch (if you prefer re-fetching instead of updating cache manually)\n    // invalidateCache(\"transactionsByEmployee\", undefined);\n  }, [fetchWithoutCache, updateCache, invalidateCache, transactions]);\n\n  if (transactions === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"RampLoading--container\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    \"data-testid\": \"transaction-container\",\n    children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(TransactionPane, {\n      transaction: transaction,\n      loading: loading,\n      setTransactionApproval: setTransactionApproval\n    }, transaction.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transactions, \"di6zr2T3uMxhOx8Pi5OXAV5PuJU=\", false, function () {\n  return [useCustomFetch];\n});\n\n_c = Transactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"names":["useCallback","useCustomFetch","TransactionPane","Transactions","transactions","fetchWithoutCache","updateCache","invalidateCache","loading","setTransactionApproval","transactionId","newValue","console","error","value","updatedTransactions","map","transaction","id","approved","undefined"],"sources":["/Users/jasonjin/Desktop/ramp-fe-challenge/src/components/Transactions/index.tsx"],"sourcesContent":["import { useCallback } from \"react\";\nimport { useCustomFetch } from \"src/hooks/useCustomFetch\";\nimport { SetTransactionApprovalParams } from \"src/utils/types\";\nimport { TransactionPane } from \"./TransactionPane\";\nimport { SetTransactionApprovalFunction, TransactionsComponent } from \"./types\";\n\nexport const Transactions: TransactionsComponent = ({ transactions }) => {\n  const { fetchWithoutCache, updateCache, invalidateCache, loading } = useCustomFetch();\n\n  const setTransactionApproval = useCallback<SetTransactionApprovalFunction>(\n    async ({ transactionId, newValue }) => {\n      if (!transactions) {\n        console.error(\"Transactions data is null.\");\n        return;\n      }\n\n      await fetchWithoutCache<void, SetTransactionApprovalParams>(\"setTransactionApproval\", {\n        transactionId,\n        value: newValue,\n      });\n\n      // Option 1: Update the cache manually\n      const updatedTransactions = transactions.map(transaction =>\n        transaction.id === transactionId\n          ? { ...transaction, approved: newValue }\n          : transaction\n      );\n      updateCache(\"transactionsByEmployee\", undefined, updatedTransactions);\n\n      // Option 2: Invalidate cache for re-fetch (if you prefer re-fetching instead of updating cache manually)\n      // invalidateCache(\"transactionsByEmployee\", undefined);\n    },\n    [fetchWithoutCache, updateCache, invalidateCache, transactions]\n  );\n\n  if (transactions === null) {\n    return <div className=\"RampLoading--container\">Loading...</div>;\n  }\n\n  return (\n    <div data-testid=\"transaction-container\">\n      {transactions.map((transaction) => (\n        <TransactionPane\n          key={transaction.id}\n          transaction={transaction}\n          loading={loading}\n          setTransactionApproval={setTransactionApproval}\n        />\n      ))}\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,cAAT,QAA+B,0BAA/B;AAEA,SAASC,eAAT,QAAgC,mBAAhC;;AAGA,OAAO,MAAMC,YAAmC,GAAG,QAAsB;EAAA;;EAAA,IAArB;IAAEC;EAAF,CAAqB;EACvE,MAAM;IAAEC,iBAAF;IAAqBC,WAArB;IAAkCC,eAAlC;IAAmDC;EAAnD,IAA+DP,cAAc,EAAnF;EAEA,MAAMQ,sBAAsB,GAAGT,WAAW,CACxC,eAAuC;IAAA,IAAhC;MAAEU,aAAF;MAAiBC;IAAjB,CAAgC;;IACrC,IAAI,CAACP,YAAL,EAAmB;MACjBQ,OAAO,CAACC,KAAR,CAAc,4BAAd;MACA;IACD;;IAED,MAAMR,iBAAiB,CAAqC,wBAArC,EAA+D;MACpFK,aADoF;MAEpFI,KAAK,EAAEH;IAF6E,CAA/D,CAAvB,CANqC,CAWrC;;IACA,MAAMI,mBAAmB,GAAGX,YAAY,CAACY,GAAb,CAAiBC,WAAW,IACtDA,WAAW,CAACC,EAAZ,KAAmBR,aAAnB,GACI,EAAE,GAAGO,WAAL;MAAkBE,QAAQ,EAAER;IAA5B,CADJ,GAEIM,WAHsB,CAA5B;IAKAX,WAAW,CAAC,wBAAD,EAA2Bc,SAA3B,EAAsCL,mBAAtC,CAAX,CAjBqC,CAmBrC;IACA;EACD,CAtBuC,EAuBxC,CAACV,iBAAD,EAAoBC,WAApB,EAAiCC,eAAjC,EAAkDH,YAAlD,CAvBwC,CAA1C;;EA0BA,IAAIA,YAAY,KAAK,IAArB,EAA2B;IACzB,oBAAO;MAAK,SAAS,EAAC,wBAAf;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAED,oBACE;IAAK,eAAY,uBAAjB;IAAA,UACGA,YAAY,CAACY,GAAb,CAAkBC,WAAD,iBAChB,QAAC,eAAD;MAEE,WAAW,EAAEA,WAFf;MAGE,OAAO,EAAET,OAHX;MAIE,sBAAsB,EAAEC;IAJ1B,GACOQ,WAAW,CAACC,EADnB;MAAA;MAAA;MAAA;IAAA,QADD;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA7CM;;GAAMf,Y;UAC0DF,c;;;KAD1DE,Y"},"metadata":{},"sourceType":"module"}